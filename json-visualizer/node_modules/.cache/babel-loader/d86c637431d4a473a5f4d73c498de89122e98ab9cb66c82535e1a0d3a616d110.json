{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swaya\\\\OneDrive\\\\Documents\\\\GitHub\\\\ChatBot\\\\json-visualizer\\\\src\\\\JSONTree.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JSONTree({\n  data\n}) {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    // Clear previous SVG content\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    // Dimensions for the SVG canvas\n    const width = 1200;\n    const height = 800;\n\n    // Function to recursively format the JSON data into a D3 hierarchy-compatible structure\n    const formatJSON = data => {\n      if (typeof data === \"object\" && data !== null) {\n        if (Array.isArray(data)) {\n          return data.map((item, index) => ({\n            name: `Index ${index}`,\n            children: formatJSON(item)\n          }));\n        } else {\n          return Object.entries(data).map(([key, value]) => ({\n            name: key,\n            children: formatJSON(value)\n          }));\n        }\n      } else {\n        return [{\n          name: String(data)\n        }];\n      }\n    };\n\n    // Convert JSON data to a D3 hierarchy-compatible structure\n    const root = d3.hierarchy({\n      name: \"Root\",\n      children: formatJSON(data)\n    });\n\n    // Create a tree layout\n    const treeLayout = d3.tree().size([width - 200, height - 200]);\n    treeLayout(root);\n\n    // Create an SVG container\n    const svg = d3.select(svgRef.current).attr(\"width\", width).attr(\"height\", height).style(\"border\", \"1px solid black\");\n\n    // Links (edges) between nodes\n    svg.selectAll(\".link\").data(root.links()).enter().append(\"line\").attr(\"class\", \"link\").attr(\"x1\", d => d.source.x + 100).attr(\"y1\", d => d.source.y + 100).attr(\"x2\", d => d.target.x + 100).attr(\"y2\", d => d.target.y + 100).style(\"stroke\", \"#aaa\").style(\"stroke-width\", 2);\n\n    // Nodes (circles)\n    svg.selectAll(\".node\").data(root.descendants()).enter().append(\"circle\").attr(\"class\", \"node\").attr(\"cx\", d => d.x + 100).attr(\"cy\", d => d.y + 100).attr(\"r\", 10).style(\"fill\", \"#69b3a2\");\n\n    // Labels for nodes\n    svg.selectAll(\".label\").data(root.descendants()).enter().append(\"text\").attr(\"class\", \"label\").attr(\"x\", d => d.x + 110).attr(\"y\", d => d.y + 105).text(d => d.data.name).style(\"font-size\", \"12px\").style(\"fill\", \"#333\");\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n}\n_s(JSONTree, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = JSONTree;\nexport default JSONTree;\nvar _c;\n$RefreshReg$(_c, \"JSONTree\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","JSONTree","data","_s","svgRef","select","current","selectAll","remove","width","height","formatJSON","Array","isArray","map","item","index","name","children","Object","entries","key","value","String","root","hierarchy","treeLayout","tree","size","svg","attr","style","links","enter","append","d","source","x","y","target","descendants","text","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/swaya/OneDrive/Documents/GitHub/ChatBot/json-visualizer/src/JSONTree.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nfunction JSONTree({ data }) {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // Clear previous SVG content\r\n    d3.select(svgRef.current).selectAll(\"*\").remove();\r\n\r\n    // Dimensions for the SVG canvas\r\n    const width = 1200;\r\n    const height = 800;\r\n\r\n    // Function to recursively format the JSON data into a D3 hierarchy-compatible structure\r\n    const formatJSON = (data) => {\r\n      if (typeof data === \"object\" && data !== null) {\r\n        if (Array.isArray(data)) {\r\n          return data.map((item, index) => ({\r\n            name: `Index ${index}`,\r\n            children: formatJSON(item),\r\n          }));\r\n        } else {\r\n          return Object.entries(data).map(([key, value]) => ({\r\n            name: key,\r\n            children: formatJSON(value),\r\n          }));\r\n        }\r\n      } else {\r\n        return [{ name: String(data) }];\r\n      }\r\n    };\r\n\r\n    // Convert JSON data to a D3 hierarchy-compatible structure\r\n    const root = d3.hierarchy({ name: \"Root\", children: formatJSON(data) });\r\n\r\n    // Create a tree layout\r\n    const treeLayout = d3.tree().size([width - 200, height - 200]);\r\n    treeLayout(root);\r\n\r\n    // Create an SVG container\r\n    const svg = d3\r\n      .select(svgRef.current)\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .style(\"border\", \"1px solid black\");\r\n\r\n    // Links (edges) between nodes\r\n    svg\r\n      .selectAll(\".link\")\r\n      .data(root.links())\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"link\")\r\n      .attr(\"x1\", (d) => d.source.x + 100)\r\n      .attr(\"y1\", (d) => d.source.y + 100)\r\n      .attr(\"x2\", (d) => d.target.x + 100)\r\n      .attr(\"y2\", (d) => d.target.y + 100)\r\n      .style(\"stroke\", \"#aaa\")\r\n      .style(\"stroke-width\", 2);\r\n\r\n    // Nodes (circles)\r\n    svg\r\n      .selectAll(\".node\")\r\n      .data(root.descendants())\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"class\", \"node\")\r\n      .attr(\"cx\", (d) => d.x + 100)\r\n      .attr(\"cy\", (d) => d.y + 100)\r\n      .attr(\"r\", 10)\r\n      .style(\"fill\", \"#69b3a2\");\r\n\r\n    // Labels for nodes\r\n    svg\r\n      .selectAll(\".label\")\r\n      .data(root.descendants())\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"class\", \"label\")\r\n      .attr(\"x\", (d) => d.x + 110)\r\n      .attr(\"y\", (d) => d.y + 105)\r\n      .text((d) => d.data.name)\r\n      .style(\"font-size\", \"12px\")\r\n      .style(\"fill\", \"#333\");\r\n  }, [data]);\r\n\r\n  return <svg ref={svgRef}></svg>;\r\n}\r\n\r\nexport default JSONTree;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}